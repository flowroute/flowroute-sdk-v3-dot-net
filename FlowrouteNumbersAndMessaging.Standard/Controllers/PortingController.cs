/*
 * FlowrouteNumbersAndMessaging.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using FlowrouteNumbersAndMessaging.Standard.Utilities;
using FlowrouteNumbersAndMessaging.Standard.Http.Request;
using FlowrouteNumbersAndMessaging.Standard.Http.Response;
using FlowrouteNumbersAndMessaging.Standard.Http.Client;
using FlowrouteNumbersAndMessaging.Standard.Exceptions;

namespace FlowrouteNumbersAndMessaging.Standard.Controllers
{
    public partial class PortingController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PortingController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PortingController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PortingController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern
        /// <summary>
        /// Returns a list of all CNAM Records currently on your Flowroute account. 
        /// </summary>
        /// <param name="numbers">Required: ArrayList of numbers to check.
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CheckPortability(List<string> numbers)
        {
            Task<dynamic> t = CheckPortabilityAsync(numbers);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a list of all CNAM Records currently on your Flowroute account. 
        /// </summary>
        /// <param name="numbers">Required: ArrayList of numbers to check.
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CheckPortabilityAsync(List<string> numbers)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v2/portorders/portability");

            //append body params
            var body = "{\"numbers\": [\'";
            body += String.Join("\', \'", numbers.ToArray());
            body += "\']}";
            Console.WriteLine("Passing body " + body);

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", "Flowroute SDK v3.0" },
                { "accept", "application/vnd.api+json" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(body);
            Console.WriteLine("Passing body " + _body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse)await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);

            Console.WriteLine("Resp: {0}, {1}", _response.StatusCode, _response.Body);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new ErrorException(@"Unauthorized â€“ There was an issue with your API credentials.", _context);

            if (_response.StatusCode == 404)
                throw new ErrorException(@"The specified resource was not found", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }
    }
} 